--- /src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ /src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -438,6 +437,0 @@
-			end.add(field, newdiff);
-			return newdiff;
-		} else {
-			return 0;
-		}
-	}
@@ -445,7 +438,0 @@
-	static final java.lang.Object y = "y";
-	static final java.lang.Object M = "M";
-	static final java.lang.Object d = "d";
-	static final java.lang.Object H = "H";
-	static final java.lang.Object m = "m";
-	static final java.lang.Object s = "s";
-	static final java.lang.Object S = "S";
@@ -459,3 +445,0 @@
-	static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) {
-		char[] array = format.toCharArray();
-		java.util.ArrayList list = new java.util.ArrayList(array.length);
@@ -463,12 +446,0 @@
-		boolean inLiteral = false;
-		java.lang.StringBuffer buffer = null;
-		org.apache.commons.lang.time.DurationFormatUtils.Token previous = null;
-		int sz = array.length;
-		for (int i = 0; i < sz; i++) {
-			char ch = array[i];
-			if (inLiteral && (ch != '\'')) {
-				buffer.append(ch);
-				continue;
-			}
-			java.lang.Object value = null;
-			switch (ch) {
@@ -476,23 +447,0 @@
-				case '\'' :
-					if (inLiteral) {
-						buffer = null;
-						inLiteral = false;
-					} else {
-						buffer = new java.lang.StringBuffer();
-						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
-						inLiteral = true;
-					}
-					break;
-				case 'y' : 					value = org.apache.commons.lang.time.DurationFormatUtils.y; 					break;
-				case 'M' : 					value = org.apache.commons.lang.time.DurationFormatUtils.M; 					break;
-				case 'd' : 					value = org.apache.commons.lang.time.DurationFormatUtils.d; 					break;
-				case 'H' : 					value = org.apache.commons.lang.time.DurationFormatUtils.H; 					break;
-				case 'm' : 					value = org.apache.commons.lang.time.DurationFormatUtils.m; 					break;
-				case 's' : 					value = org.apache.commons.lang.time.DurationFormatUtils.s; 					break;
-				case 'S' : 					value = org.apache.commons.lang.time.DurationFormatUtils.S; 					break;
-				default :
-					if (buffer == null) {
-						buffer = new java.lang.StringBuffer();
-						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
-					}
-					buffer.append(ch);}
@@ -501,13 +449,0 @@
-			if (value != null) {
-				if ((previous != null) && (previous.getValue() == value)) {
-					previous.increment();
-				} else {
-					org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value);
-					list.add(token);
-					previous = token;
-				}
-				buffer = null;
-			}
-		}
-		return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));
-	}
@@ -518 +453,0 @@
-	static class Token {
@@ -527,9 +461,0 @@
-		static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) {
-			int sz = tokens.length;
-			for (int i = 0; i < sz; i++) {
-				if (tokens[i].getValue() == value) {
-					return true;
-				}
-			}
-			return false;
-		}
@@ -537,2 +462,0 @@
-		private java.lang.Object value;
-		private int count;
@@ -545,4 +468,0 @@
-		Token(java.lang.Object value) {
-			this.value = value;
-			this.count = 1;
-		}
@@ -557,4 +476,0 @@
-		Token(java.lang.Object value, int count) {
-			this.value = value;
-			this.count = count;
-		}
@@ -565,3 +480,0 @@
-		void increment() {
-			count++;
-		}
@@ -574,3 +486,0 @@
-		int getCount() {
-			return count;
-		}
@@ -583,3 +492,0 @@
-		java.lang.Object getValue() {
-			return value;
-		}
@@ -593,20 +499,0 @@
-		public boolean equals(java.lang.Object obj2) {
-			if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) {
-				org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2));
-				if (this.value.getClass() != tok2.value.getClass()) {
-					return false;
-				}
-				if (this.count != tok2.count) {
-					return false;
-				}
-				if (this.value instanceof java.lang.StringBuffer) {
-					return this.value.toString().equals(tok2.value.toString());
-				} else if (this.value instanceof java.lang.Number) {
-					return this.value.equals(tok2.value);
-				} else {
-					return this.value == tok2.value;
-				}
-			} else {
-				return false;
-			}
-		}
@@ -621,3 +507,0 @@
-		public int hashCode() {
-			return this.value.hashCode();
-		}
@@ -630,4 +514,355 @@
-		public java.lang.String toString() {
-			return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);
-		}
-	}}
\ No newline at end of file
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			start.add(java.util.Calendar.DATE, -1); 			return newdiff;} else { 			return 0;}} 	static final java.lang.Object y = "y"; 	static final java.lang.Object M = "M"; 	static final java.lang.Object d = "d"; 	static final java.lang.Object H = "H"; 	static final java.lang.Object m = "m"; 	static final java.lang.Object s = "s"; 	static final java.lang.Object S = "S"; 	static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) { 		char[] array = format.toCharArray(); 		java.util.ArrayList list = new java.util.ArrayList(array.length); 		boolean inLiteral = false; 		java.lang.StringBuffer buffer = null; 		org.apache.commons.lang.time.DurationFormatUtils.Token previous = null; 		int sz = array.length; 		for (int i = 0; i < sz; i++) { 			char ch = array[i]; 			if (inLiteral && (ch != '\'')) { 				buffer.append(ch); 				continue;} 			java.lang.Object value = null; 			switch (ch) { 				case '\'' : 					if (inLiteral) { 						buffer = null; 						inLiteral = false;} else { 						buffer = new java.lang.StringBuffer(); 						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer)); 						inLiteral = true;} 					break; 				case 'y' : 					value = org.apache.commons.lang.time.DurationFormatUtils.y; 					break; 				case 'M' : 					value = org.apache.commons.lang.time.DurationFormatUtils.M; 					break; 				case 'd' : 					value = org.apache.commons.lang.time.DurationFormatUtils.d; 					break; 				case 'H' : 					value = org.apache.commons.lang.time.DurationFormatUtils.H; 					break; 				case 'm' : 					value = org.apache.commons.lang.time.DurationFormatUtils.m; 					break; 				case 's' : 					value = org.apache.commons.lang.time.DurationFormatUtils.s; 					break; 				case 'S' : 					value = org.apache.commons.lang.time.DurationFormatUtils.S; 					break; 				default : 					if (buffer == null) { 						buffer = new java.lang.StringBuffer(); 						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));} 					buffer.append(ch);} 			if (value != null) { 				if ((previous != null) && (previous.getValue() == value)) { 					previous.increment();} else { 					org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value); 					list.add(token); 					previous = token;} 				buffer = null;}} 		return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));} 	static class Token { 		static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) { 			int sz = tokens.length; 			for (int i = 0; i < sz; i++) { 				if (tokens[i].getValue() == value) { 					return true;}} 			return false;} 		private java.lang.Object value; 		private int count; 		Token(java.lang.Object value) { 			this.value = value; 			this.count = 1;} 		Token(java.lang.Object value, int count) { 			this.value = value; 			this.count = count;} 		void increment() { 			count++;} 		int getCount() { 			return count;} 		java.lang.Object getValue() { 			return value;} 		public boolean equals(java.lang.Object obj2) { 			if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) { 				org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2)); 				if (this.value.getClass() != tok2.value.getClass()) { 					return false;} 				if (this.count != tok2.count) { 					return false;} 				if (this.value instanceof java.lang.StringBuffer) { 					return this.value.toString().equals(tok2.value.toString());} else if (this.value instanceof java.lang.Number) { 					return this.value.equals(tok2.value);} else { 					return this.value == tok2.value;}} else { 				return false;}} 		public int hashCode() { 			return this.value.hashCode();} 		public java.lang.String toString() { 			return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);}}}
\ No newline at end of file

