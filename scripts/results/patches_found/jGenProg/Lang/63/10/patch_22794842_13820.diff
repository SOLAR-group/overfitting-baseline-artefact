--- /src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ /src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -306 +305,0 @@
-			days += 31;
@@ -312,13 +310,0 @@
-			months -= 1;
-		} 
-		while (months < 0) {
-			months += 12;
-			years -= 1;
-		} 
-		milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);
-		seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);
-		minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);
-		hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);
-		days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);
-		months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);
-		years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);
@@ -329,5 +314,0 @@
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {
-			if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {
-				months += 12 * years;
-				years = 0;
-			} else {
@@ -335,24 +315,0 @@
-				days += 365 * years;
-				years = 0;
-			}
-		}
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {
-			days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);
-			months = 0;
-		}
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {
-			hours += 24 * days;
-			days = 0;
-		}
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {
-			minutes += 60 * hours;
-			hours = 0;
-		}
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {
-			seconds += 60 * minutes;
-			minutes = 0;
-		}
-		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {
-			milliseconds += 1000 * seconds;
-			seconds = 0;
-		}
@@ -360,2 +316,0 @@
-		return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
-	}
@@ -378,50 +332,0 @@
-	static java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, 
-	int milliseconds, boolean padWithZeros) {
-		java.lang.StringBuffer buffer = new java.lang.StringBuffer();
-		boolean lastOutputSeconds = false;
-		int sz = tokens.length;
-		for (int i = 0; i < sz; i++) {
-			org.apache.commons.lang.time.DurationFormatUtils.Token token = tokens[i];
-			java.lang.Object value = token.getValue();
-			int count = token.getCount();
-			if (value instanceof java.lang.StringBuffer) {
-				buffer.append(value.toString());
-			} else 
-			if (value == org.apache.commons.lang.time.DurationFormatUtils.y) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(years), count, '0') : java.lang.Integer.toString(
-				years));
-				lastOutputSeconds = false;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.M) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(months), count, '0') : java.lang.Integer.toString(
-				months));
-				lastOutputSeconds = false;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.d) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(days), count, '0') : java.lang.Integer.toString(
-				days));
-				lastOutputSeconds = false;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.H) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(hours), count, '0') : java.lang.Integer.toString(
-				hours));
-				lastOutputSeconds = false;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.m) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(minutes), count, '0') : java.lang.Integer.toString(
-				minutes));
-				lastOutputSeconds = false;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.s) {
-				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(seconds), count, '0') : java.lang.Integer.toString(
-				seconds));
-				lastOutputSeconds = true;
-			} else if (value == org.apache.commons.lang.time.DurationFormatUtils.S) {
-				if (lastOutputSeconds) {
-					milliseconds += 1000;
-					java.lang.String str = (padWithZeros) ? 
-					org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : 
-					java.lang.Integer.toString(milliseconds);
-					buffer.append(str.substring(1));
-				} else {
-					buffer.append(padWithZeros ? 
-					org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : 
-					java.lang.Integer.toString(milliseconds));
-				}
-				lastOutputSeconds = false;
-			}
@@ -429,15 +333,0 @@
-		}
-		return buffer.toString();
-	}
-	static int reduceAndCorrect(java.util.Calendar start, java.util.Calendar end, int field, int difference) {
-		end.add(field, (-1) * difference);
-		int endValue = end.get(field);
-		int startValue = start.get(field);
-		if (endValue < startValue) {
-			int newdiff = startValue - endValue;
-			end.add(field, newdiff);
-			return newdiff;
-		} else {
-			return 0;
-		}
-	}
@@ -445,7 +334,0 @@
-	static final java.lang.Object y = "y";
-	static final java.lang.Object M = "M";
-	static final java.lang.Object d = "d";
-	static final java.lang.Object H = "H";
-	static final java.lang.Object m = "m";
-	static final java.lang.Object s = "s";
-	static final java.lang.Object S = "S";
@@ -459,3 +341,0 @@
-	static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) {
-		char[] array = format.toCharArray();
-		java.util.ArrayList list = new java.util.ArrayList(array.length);
@@ -463,12 +342,0 @@
-		boolean inLiteral = false;
-		java.lang.StringBuffer buffer = null;
-		org.apache.commons.lang.time.DurationFormatUtils.Token previous = null;
-		int sz = array.length;
-		for (int i = 0; i < sz; i++) {
-			char ch = array[i];
-			if (inLiteral && (ch != '\'')) {
-				buffer.append(ch);
-				continue;
-			}
-			java.lang.Object value = null;
-			switch (ch) {
@@ -476,23 +343,0 @@
-				case '\'' :
-					if (inLiteral) {
-						buffer = null;
-						inLiteral = false;
-					} else {
-						buffer = new java.lang.StringBuffer();
-						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
-						inLiteral = true;
-					}
-					break;
-				case 'y' : 					value = org.apache.commons.lang.time.DurationFormatUtils.y; 					break;
-				case 'M' : 					value = org.apache.commons.lang.time.DurationFormatUtils.M; 					break;
-				case 'd' : 					value = org.apache.commons.lang.time.DurationFormatUtils.d; 					break;
-				case 'H' : 					value = org.apache.commons.lang.time.DurationFormatUtils.H; 					break;
-				case 'm' : 					value = org.apache.commons.lang.time.DurationFormatUtils.m; 					break;
-				case 's' : 					value = org.apache.commons.lang.time.DurationFormatUtils.s; 					break;
-				case 'S' : 					value = org.apache.commons.lang.time.DurationFormatUtils.S; 					break;
-				default :
-					if (buffer == null) {
-						buffer = new java.lang.StringBuffer();
-						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));
-					}
-					buffer.append(ch);}
@@ -501,13 +345,0 @@
-			if (value != null) {
-				if ((previous != null) && (previous.getValue() == value)) {
-					previous.increment();
-				} else {
-					org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value);
-					list.add(token);
-					previous = token;
-				}
-				buffer = null;
-			}
-		}
-		return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));
-	}
@@ -518 +349,0 @@
-	static class Token {
@@ -527,9 +357,0 @@
-		static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) {
-			int sz = tokens.length;
-			for (int i = 0; i < sz; i++) {
-				if (tokens[i].getValue() == value) {
-					return true;
-				}
-			}
-			return false;
-		}
@@ -537,2 +358,0 @@
-		private java.lang.Object value;
-		private int count;
@@ -545,4 +364,0 @@
-		Token(java.lang.Object value) {
-			this.value = value;
-			this.count = 1;
-		}
@@ -557,4 +372,0 @@
-		Token(java.lang.Object value, int count) {
-			this.value = value;
-			this.count = count;
-		}
@@ -565,3 +376,0 @@
-		void increment() {
-			count++;
-		}
@@ -574,3 +382,0 @@
-		int getCount() {
-			return count;
-		}
@@ -583,3 +388,0 @@
-		java.lang.Object getValue() {
-			return value;
-		}
@@ -593,20 +395,0 @@
-		public boolean equals(java.lang.Object obj2) {
-			if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) {
-				org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2));
-				if (this.value.getClass() != tok2.value.getClass()) {
-					return false;
-				}
-				if (this.count != tok2.count) {
-					return false;
-				}
-				if (this.value instanceof java.lang.StringBuffer) {
-					return this.value.toString().equals(tok2.value.toString());
-				} else if (this.value instanceof java.lang.Number) {
-					return this.value.equals(tok2.value);
-				} else {
-					return this.value == tok2.value;
-				}
-			} else {
-				return false;
-			}
-		}
@@ -621,3 +403,0 @@
-		public int hashCode() {
-			return this.value.hashCode();
-		}
@@ -630,4 +410,459 @@
-		public java.lang.String toString() {
-			return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);
-		}
-	}}
\ No newline at end of file
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			start.add(java.util.Calendar.DATE, -1); 			days += 31; 			months -= 1;} 		while (months < 0) { 			months += 12; 			years -= 1;} 		milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds); 		seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds); 		minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes); 		hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours); 		days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days); 		months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months); 		years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years); 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) { 			if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) { 				months += 12 * years; 				years = 0;} else { 				days += 365 * years; 				years = 0;}} 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) { 			days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR); 			months = 0;} 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) { 			hours += 24 * days; 			days = 0;} 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) { 			minutes += 60 * hours; 			hours = 0;} 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) { 			seconds += 60 * minutes; 			minutes = 0;} 		if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) { 			milliseconds += 1000 * seconds; 			seconds = 0;} 		return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);} 	static java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) { 		java.lang.StringBuffer buffer = new java.lang.StringBuffer(); 		boolean lastOutputSeconds = false; 		int sz = tokens.length; 		for (int i = 0; i < sz; i++) { 			org.apache.commons.lang.time.DurationFormatUtils.Token token = tokens[i]; 			java.lang.Object value = token.getValue(); 			int count = token.getCount(); 			if (value instanceof java.lang.StringBuffer) { 				buffer.append(value.toString());} else if (value == org.apache.commons.lang.time.DurationFormatUtils.y) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(years), count, '0') : java.lang.Integer.toString(years)); 				lastOutputSeconds = false;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.M) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(months), count, '0') : java.lang.Integer.toString(months)); 				lastOutputSeconds = false;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.d) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(days), count, '0') : java.lang.Integer.toString(days)); 				lastOutputSeconds = false;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.H) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(hours), count, '0') : java.lang.Integer.toString(hours)); 				lastOutputSeconds = false;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.m) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(minutes), count, '0') : java.lang.Integer.toString(minutes)); 				lastOutputSeconds = false;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.s) { 				buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(seconds), count, '0') : java.lang.Integer.toString(seconds)); 				lastOutputSeconds = true;} else if (value == org.apache.commons.lang.time.DurationFormatUtils.S) { 				if (lastOutputSeconds) { 					milliseconds += 1000; 					java.lang.String str = (padWithZeros) ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds); 					buffer.append(str.substring(1));} else { 					buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds));} 				lastOutputSeconds = false;}} 		return buffer.toString();} 	static int reduceAndCorrect(java.util.Calendar start, java.util.Calendar end, int field, int difference) { 		end.add(field, (-1) * difference); 		int endValue = end.get(field); 		int startValue = start.get(field); 		if (endValue < startValue) { 			int newdiff = startValue - endValue; 			end.add(field, newdiff); 			return newdiff;} else { 			return 0;}} 	static final java.lang.Object y = "y"; 	static final java.lang.Object M = "M"; 	static final java.lang.Object d = "d"; 	static final java.lang.Object H = "H"; 	static final java.lang.Object m = "m"; 	static final java.lang.Object s = "s"; 	static final java.lang.Object S = "S"; 	static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) { 		char[] array = format.toCharArray(); 		java.util.ArrayList list = new java.util.ArrayList(array.length); 		boolean inLiteral = false; 		java.lang.StringBuffer buffer = null; 		org.apache.commons.lang.time.DurationFormatUtils.Token previous = null; 		int sz = array.length; 		for (int i = 0; i < sz; i++) { 			char ch = array[i]; 			if (inLiteral && (ch != '\'')) { 				buffer.append(ch); 				continue;} 			java.lang.Object value = null; 			switch (ch) { 				case '\'' : 					if (inLiteral) { 						buffer = null; 						inLiteral = false;} else { 						buffer = new java.lang.StringBuffer(); 						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer)); 						inLiteral = true;} 					break; 				case 'y' : 					value = org.apache.commons.lang.time.DurationFormatUtils.y; 					break; 				case 'M' : 					value = org.apache.commons.lang.time.DurationFormatUtils.M; 					break; 				case 'd' : 					value = org.apache.commons.lang.time.DurationFormatUtils.d; 					break; 				case 'H' : 					value = org.apache.commons.lang.time.DurationFormatUtils.H; 					break; 				case 'm' : 					value = org.apache.commons.lang.time.DurationFormatUtils.m; 					break; 				case 's' : 					value = org.apache.commons.lang.time.DurationFormatUtils.s; 					break; 				case 'S' : 					value = org.apache.commons.lang.time.DurationFormatUtils.S; 					break; 				default : 					if (buffer == null) { 						buffer = new java.lang.StringBuffer(); 						list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));} 					buffer.append(ch);} 			if (value != null) { 				if ((previous != null) && (previous.getValue() == value)) { 					previous.increment();} else { 					org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value); 					list.add(token); 					previous = token;} 				buffer = null;}} 		return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));} 	static class Token { 		static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) { 			int sz = tokens.length; 			for (int i = 0; i < sz; i++) { 				if (tokens[i].getValue() == value) { 					return true;}} 			return false;} 		private java.lang.Object value; 		private int count; 		Token(java.lang.Object value) { 			this.value = value; 			this.count = 1;} 		Token(java.lang.Object value, int count) { 			this.value = value; 			this.count = count;} 		void increment() { 			count++;} 		int getCount() { 			return count;} 		java.lang.Object getValue() { 			return value;} 		public boolean equals(java.lang.Object obj2) { 			if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) { 				org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2)); 				if (this.value.getClass() != tok2.value.getClass()) { 					return false;} 				if (this.count != tok2.count) { 					return false;} 				if (this.value instanceof java.lang.StringBuffer) { 					return this.value.toString().equals(tok2.value.toString());} else if (this.value instanceof java.lang.Number) { 					return this.value.equals(tok2.value);} else { 					return this.value == tok2.value;}} else { 				return false;}} 		public int hashCode() { 			return this.value.hashCode();} 		public java.lang.String toString() { 			return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);}}}
\ No newline at end of file

