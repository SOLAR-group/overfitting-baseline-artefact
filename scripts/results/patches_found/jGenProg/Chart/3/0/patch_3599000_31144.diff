--- /source/org/jfree/data/time/TimeSeries.java
+++ /source/org/jfree/data/time/TimeSeries.java
@@ -345,2 +344,0 @@
-		return this.minY;
-	}
@@ -359,3 +356,0 @@
-	public double getMaxY() {
-		return this.maxY;
-	}
@@ -373,3 +367,0 @@
-	public java.lang.Class getTimePeriodClass() {
-		return this.timePeriodClass;
-	}
@@ -388,4 +379,0 @@
-	public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
-	}
@@ -405,9 +392,0 @@
-	public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
-		int index = getIndex(period);
-		if (index >= 0) {
-			return getDataItem(index);
-		} else 
-		{
-			return null;
-		}
-	}
@@ -428,3 +406,0 @@
-	org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
-		return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-	}
@@ -445,9 +420,0 @@
-	org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
-		int index = getIndex(period);
-		if (index >= 0) {
-			return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		} else 
-		{
-			return null;
-		}
-	}
@@ -462,3 +428,0 @@
-	public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
-		return getRawDataItem(index).getPeriod();
-	}
@@ -472,4 +435,0 @@
-	public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
-		org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
-		return last.next();
-	}
@@ -482,7 +441,0 @@
-	public java.util.Collection getTimePeriods() {
-		java.util.Collection result = new java.util.ArrayList();
-		for (int i = 0; i < getItemCount(); i++) {
-			result.add(getTimePeriod(i));
-		}
-		return result;
-	}
@@ -498,11 +450,0 @@
-	public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
-		java.util.Collection result = new java.util.ArrayList();
-		for (int i = 0; i < series.getItemCount(); i++) {
-			org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
-			int index = getIndex(period);
-			if (index < 0) {
-				result.add(period);
-			}
-		}
-		return result;
-	}
@@ -518,8 +459,0 @@
-	public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
-		if (period == null) {
-			throw new java.lang.IllegalArgumentException("Null 'period' argument.");
-		}
-		org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(
-		period, java.lang.Integer.MIN_VALUE);
-		return java.util.Collections.binarySearch(this.data, dummy);
-	}
@@ -534,3 +467,0 @@
-	public java.lang.Number getValue(int index) {
-		return getRawDataItem(index).getValue();
-	}
@@ -546,9 +476,0 @@
-	public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
-		int index = getIndex(period);
-		if (index >= 0) {
-			return getValue(index);
-		} else 
-		{
-			return null;
-		}
-	}
@@ -563,3 +484,0 @@
-	public void add(org.jfree.data.time.TimeSeriesDataItem item) {
-		add(item, true);
-	}
@@ -575,19 +493,0 @@
-	public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
-		if (item == null) {
-			throw new java.lang.IllegalArgumentException("Null 'item' argument.");
-		}
-		item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
-		java.lang.Class c = item.getPeriod().getClass();
-		if (this.timePeriodClass == null) {
-			this.timePeriodClass = c;
-		} else 
-		if (!this.timePeriodClass.equals(c)) {
-			java.lang.StringBuffer b = new java.lang.StringBuffer();
-			b.append("You are trying to add data where the time period class ");
-			b.append("is ");
-			b.append(item.getPeriod().getClass().getName());
-			b.append(", but the TimeSeries is expecting an instance of ");
-			b.append(this.timePeriodClass.getName());
-			b.append(".");
-			throw new org.jfree.data.general.SeriesException(b.toString());
-		}
@@ -596,32 +495,0 @@
-		boolean added = false;
-		int count = getItemCount();
-		if (count == 0) {
-			this.data.add(item);
-			added = true;
-		} else 
-		{
-			org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
-			if (item.getPeriod().compareTo(last) > 0) {
-				this.data.add(item);
-				added = true;
-			} else 
-			{
-				int index = java.util.Collections.binarySearch(this.data, item);
-				if (index < 0) {
-					this.data.add((-index) - 1, item);
-					added = true;
-				} else 
-				{
-					java.lang.StringBuffer b = new java.lang.StringBuffer();
-					b.append("You are attempting to add an observation for ");
-					b.append("the time period ");
-					b.append(item.getPeriod().toString());
-					b.append(" but the series already contains an observation");
-					b.append(" for that time period. Duplicates are not ");
-					b.append("permitted.  Try using the addOrUpdate() method.");
-					throw new org.jfree.data.general.SeriesException(b.toString());
-				}
-			}
-		}
-		if (added) {
-			updateBoundsForAddedItem(item);
@@ -629,4 +496,0 @@
-			if (getItemCount() > this.maximumItemCount) {
-				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
-				updateBoundsForRemovedItem(d);
-			}
@@ -634 +497,0 @@
-			removeAgedItems(false);
@@ -637,4 +499,0 @@
-			if (notify) {
-				fireSeriesChanged();
-			}
-		}
@@ -642 +500,0 @@
-	}
@@ -651 +508,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
@@ -653,2 +509,0 @@
-		add(period, value, true);
-	}
@@ -664 +518,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
@@ -666,3 +519,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -678 +528,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
@@ -680,2 +529,0 @@
-		add(period, value, true);
-	}
@@ -691 +538,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
@@ -693,3 +539,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -704,9 +547,0 @@
-	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		int index = java.util.Collections.binarySearch(this.data, temp);
-		if (index < 0) {
-			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + 
-			"specified 'period'.");
-		}
-		update(index, value);
-	}
@@ -720,13 +555,178 @@
-	public void update(int index, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		boolean iterate = false;
-		java.lang.Number oldYN = item.getValue();
-		if (oldYN != null) {
-			double oldY = oldYN.doubleValue();
-			if (!java.lang.Double.isNaN(oldY)) {
-				iterate = (oldY <= this.minY) || (oldY >= this.maxY);
-			}
-		}
-		item.setValue(value);
-		if (iterate) {
-			findBoundsByIteration();
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		findBoundsByIteration(); 		return this.minY;} 	public double getMaxY() { 		return this.maxY;} 	public java.lang.Class getTimePeriodClass() { 		return this.timePeriodClass;} 	public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));} 	public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) { 		int index = getIndex(period); 		if (index >= 0) { 			return getDataItem(index);} else { 			return null;}} 	org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) { 		return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));} 	org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) { 		int index = getIndex(period); 		if (index >= 0) { 			return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));} else { 			return null;}} 	public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) { 		return getRawDataItem(index).getPeriod();} 	public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() { 		org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1); 		return last.next();} 	public java.util.Collection getTimePeriods() { 		java.util.Collection result = new java.util.ArrayList(); 		for (int i = 0; i < getItemCount(); i++) { 			result.add(getTimePeriod(i));} 		return result;} 	public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) { 		java.util.Collection result = new java.util.ArrayList(); 		for (int i = 0; i < series.getItemCount(); i++) { 			org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i); 			int index = getIndex(period); 			if (index < 0) { 				result.add(period);}} 		return result;} 	public int getIndex(org.jfree.data.time.RegularTimePeriod period) { 		if (period == null) { 			throw new java.lang.IllegalArgumentException("Null 'period' argument.");} 		org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE); 		return java.util.Collections.binarySearch(this.data, dummy);} 	public java.lang.Number getValue(int index) { 		return getRawDataItem(index).getValue();} 	public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) { 		int index = getIndex(period); 		if (index >= 0) { 			return getValue(index);} else { 			return null;}} 	public void add(org.jfree.data.time.TimeSeriesDataItem item) { 		add(item, true);} 	public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) { 		if (item == null) { 			throw new java.lang.IllegalArgumentException("Null 'item' argument.");} 		item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); 		java.lang.Class c = item.getPeriod().getClass(); 		if (this.timePeriodClass == null) { 			this.timePeriodClass = c;} else if (!this.timePeriodClass.equals(c)) { 			java.lang.StringBuffer b = new java.lang.StringBuffer(); 			b.append("You are trying to add data where the time period class "); 			b.append("is "); 			b.append(item.getPeriod().getClass().getName()); 			b.append(", but the TimeSeries is expecting an instance of "); 			b.append(this.timePeriodClass.getName()); 			b.append("."); 			throw new org.jfree.data.general.SeriesException(b.toString());} 		boolean added = false; 		int count = getItemCount(); 		if (count == 0) { 			this.data.add(item); 			added = true;} else { 			org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1); 			if (item.getPeriod().compareTo(last) > 0) { 				this.data.add(item); 				added = true;} else { 				int index = java.util.Collections.binarySearch(this.data, item); 				if (index < 0) { 					this.data.add((-index) - 1, item); 					added = true;} else { 					java.lang.StringBuffer b = new java.lang.StringBuffer(); 					b.append("You are attempting to add an observation for "); 					b.append("the time period "); 					b.append(item.getPeriod().toString()); 					b.append(" but the series already contains an observation"); 					b.append(" for that time period. Duplicates are not "); 					b.append("permitted.  Try using the addOrUpdate() method."); 					throw new org.jfree.data.general.SeriesException(b.toString());}}} 		if (added) { 			updateBoundsForAddedItem(item); 			if (getItemCount() > this.maximumItemCount) { 				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); 				updateBoundsForRemovedItem(d);} 			removeAgedItems(false); 			if (notify) { 				fireSeriesChanged();}}} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		int index = java.util.Collections.binarySearch(this.data, temp); 		if (index < 0) { 			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");} 		update(index, value);} 	public void update(int index, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		boolean iterate = false; 		java.lang.Number oldYN = item.getValue(); 		if (oldYN != null) { 			double oldY = oldYN.doubleValue(); 			if (!java.lang.Double.isNaN(oldY)) { 				iterate = (oldY <= this.minY) || (oldY >= this.maxY);}} 		item.setValue(value); 		if (iterate) { 			findBoundsByIteration();

