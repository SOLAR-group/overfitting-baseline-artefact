--- /source/org/jfree/data/time/TimeSeries.java
+++ /source/org/jfree/data/time/TimeSeries.java
@@ -598,30 +597,0 @@
-		if (count == 0) {
-			this.data.add(item);
-			added = true;
-		} else 
-		{
-			org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
-			if (item.getPeriod().compareTo(last) > 0) {
-				this.data.add(item);
-				added = true;
-			} else 
-			{
-				int index = java.util.Collections.binarySearch(this.data, item);
-				if (index < 0) {
-					this.data.add((-index) - 1, item);
-					added = true;
-				} else 
-				{
-					java.lang.StringBuffer b = new java.lang.StringBuffer();
-					b.append("You are attempting to add an observation for ");
-					b.append("the time period ");
-					b.append(item.getPeriod().toString());
-					b.append(" but the series already contains an observation");
-					b.append(" for that time period. Duplicates are not ");
-					b.append("permitted.  Try using the addOrUpdate() method.");
-					throw new org.jfree.data.general.SeriesException(b.toString());
-				}
-			}
-		}
-		if (added) {
-			updateBoundsForAddedItem(item);
@@ -629,4 +598,0 @@
-			if (getItemCount() > this.maximumItemCount) {
-				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
-				updateBoundsForRemovedItem(d);
-			}
@@ -634 +599,0 @@
-			removeAgedItems(false);
@@ -637,4 +601,0 @@
-			if (notify) {
-				fireSeriesChanged();
-			}
-		}
@@ -642 +602,0 @@
-	}
@@ -651 +610,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
@@ -653,2 +611,0 @@
-		add(period, value, true);
-	}
@@ -664 +620,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
@@ -666,3 +621,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -678 +630,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
@@ -680,2 +631,0 @@
-		add(period, value, true);
-	}
@@ -691 +640,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
@@ -693,3 +641,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -704,9 +649,0 @@
-	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		int index = java.util.Collections.binarySearch(this.data, temp);
-		if (index < 0) {
-			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + 
-			"specified 'period'.");
-		}
-		update(index, value);
-	}
@@ -720,13 +657,76 @@
-	public void update(int index, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		boolean iterate = false;
-		java.lang.Number oldYN = item.getValue();
-		if (oldYN != null) {
-			double oldY = oldYN.doubleValue();
-			if (!java.lang.Double.isNaN(oldY)) {
-				iterate = (oldY <= this.minY) || (oldY >= this.maxY);
-			}
-		}
-		item.setValue(value);
-		if (iterate) {
-			findBoundsByIteration();
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		findBoundsByIteration(); 		if (count == 0) { 			this.data.add(item); 			added = true;} else { 			org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1); 			if (item.getPeriod().compareTo(last) > 0) { 				this.data.add(item); 				added = true;} else { 				int index = java.util.Collections.binarySearch(this.data, item); 				if (index < 0) { 					this.data.add((-index) - 1, item); 					added = true;} else { 					java.lang.StringBuffer b = new java.lang.StringBuffer(); 					b.append("You are attempting to add an observation for "); 					b.append("the time period "); 					b.append(item.getPeriod().toString()); 					b.append(" but the series already contains an observation"); 					b.append(" for that time period. Duplicates are not "); 					b.append("permitted.  Try using the addOrUpdate() method."); 					throw new org.jfree.data.general.SeriesException(b.toString());}}} 		if (added) { 			updateBoundsForAddedItem(item); 			if (getItemCount() > this.maximumItemCount) { 				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); 				updateBoundsForRemovedItem(d);} 			removeAgedItems(false); 			if (notify) { 				fireSeriesChanged();}}} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		int index = java.util.Collections.binarySearch(this.data, temp); 		if (index < 0) { 			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");} 		update(index, value);} 	public void update(int index, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		boolean iterate = false; 		java.lang.Number oldYN = item.getValue(); 		if (oldYN != null) { 			double oldY = oldYN.doubleValue(); 			if (!java.lang.Double.isNaN(oldY)) { 				iterate = (oldY <= this.minY) || (oldY >= this.maxY);}} 		item.setValue(value); 		if (iterate) { 			findBoundsByIteration();

