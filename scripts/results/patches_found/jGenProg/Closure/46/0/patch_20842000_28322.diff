--- /src/com/google/javascript/rhino/jstype/RecordType.java
+++ /src/com/google/javascript/rhino/jstype/RecordType.java
@@ -153,7 +152,0 @@
-		}
-		return builder.build();
-	}
-	com.google.javascript.rhino.jstype.JSType getGreatestSubtypeHelper(com.google.javascript.rhino.jstype.JSType that) {
-		if (that.isRecordType()) {
-			com.google.javascript.rhino.jstype.RecordType thatRecord = that.toMaybeRecordType();
-			com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(registry);
@@ -164,6 +156,0 @@
-			for (java.lang.String property : properties.keySet()) {
-				if (thatRecord.hasProperty(property) && 
-				(!thatRecord.getPropertyType(property).isEquivalentTo(
-				getPropertyType(property)))) {
-					return registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
-				}
@@ -171,3 +157,0 @@
-				builder.addProperty(property, getPropertyType(property), 
-				getPropertyNode(property));
-			}
@@ -175,6 +158,0 @@
-			for (java.lang.String property : thatRecord.properties.keySet()) {
-				if (!hasProperty(property)) {
-					builder.addProperty(property, thatRecord.getPropertyType(property), 
-					thatRecord.getPropertyNode(property));
-				}
-			}
@@ -182,2 +159,0 @@
-			return builder.build();
-		}
@@ -185,6 +160,0 @@
-		com.google.javascript.rhino.jstype.JSType greatestSubtype = registry.getNativeType(
-		com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
-		com.google.javascript.rhino.jstype.JSType thatRestrictedToObj = 
-		registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE).getGreatestSubtype(
-		that);
-		if (!thatRestrictedToObj.isEmptyType()) {
@@ -197,19 +166,0 @@
-			for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.JSType> entry : properties.entrySet()) {
-				java.lang.String propName = entry.getKey();
-				com.google.javascript.rhino.jstype.JSType propType = entry.getValue();
-				com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
-				for (com.google.javascript.rhino.jstype.ObjectType alt : 
-				registry.getEachReferenceTypeWithProperty(propName)) {
-					com.google.javascript.rhino.jstype.JSType altPropType = alt.getPropertyType(propName);
-					if ((((altPropType != null) && (!alt.isEquivalentTo(this))) && 
-					alt.isSubtype(that)) && 
-					((propType.isUnknownType() || altPropType.isUnknownType()) || 
-					altPropType.isEquivalentTo(propType))) {
-						builder.addAlternate(alt);
-					}
-				}
-				greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());
-			}
-		}
-		return greatestSubtype;
-	}
@@ -217,4 +167,0 @@
-	@java.lang.Override
-	com.google.javascript.rhino.jstype.RecordType toMaybeRecordType() {
-		return this;
-	}
@@ -222,5 +168,0 @@
-	@java.lang.Override
-	public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
-		if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
-			return true;
-		}
@@ -229,4 +170,0 @@
-		if (registry.getNativeObjectType(
-		com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE).isSubtype(that)) {
-			return true;
-		}
@@ -237,3 +174,0 @@
-		if (!that.isRecordType()) {
-			return false;
-		}
@@ -241,2 +175,0 @@
-		return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
-	}
@@ -245 +177,0 @@
-	static boolean isSubtype(com.google.javascript.rhino.jstype.ObjectType typeA, com.google.javascript.rhino.jstype.RecordType typeB) {
@@ -263,4 +194,0 @@
-		for (java.lang.String property : typeB.properties.keySet()) {
-			if (!typeA.hasProperty(property)) {
-				return false;
-			}
@@ -268,11 +195,0 @@
-			com.google.javascript.rhino.jstype.JSType propA = typeA.getPropertyType(property);
-			com.google.javascript.rhino.jstype.JSType propB = typeB.getPropertyType(property);
-			if ((!propA.isUnknownType()) && (!propB.isUnknownType())) {
-				if (typeA.isPropertyTypeDeclared(property)) {
-					if (!propA.isEquivalentTo(propB)) {
-						return false;
-					}
-				} else 
-				if (!propA.isSubtype(propB)) {
-					return false;
-				}
@@ -280,2 +196,0 @@
-			}
-		}
@@ -283,2 +197,0 @@
-		return true;
-	}
@@ -286,11 +199,490 @@
-	@java.lang.Override
-	com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
-		for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.JSType> entry : properties.entrySet()) {
-			com.google.javascript.rhino.jstype.JSType type = entry.getValue();
-			com.google.javascript.rhino.jstype.JSType resolvedType = type.resolve(t, scope);
-			if (type != resolvedType) {
-				properties.put(entry.getKey(), resolvedType);
-			}
-		}
-		return super.resolveInternal(t, scope);
-	}}
\ No newline at end of file
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			return com.google.javascript.rhino.jstype.JSType.getLeastSupertype(this, that);} 		return builder.build();} 	com.google.javascript.rhino.jstype.JSType getGreatestSubtypeHelper(com.google.javascript.rhino.jstype.JSType that) { 		if (that.isRecordType()) { 			com.google.javascript.rhino.jstype.RecordType thatRecord = that.toMaybeRecordType(); 			com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(registry); 			for (java.lang.String property : properties.keySet()) { 				if (thatRecord.hasProperty(property) && (!thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property)))) { 					return registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);} 				builder.addProperty(property, getPropertyType(property), getPropertyNode(property));} 			for (java.lang.String property : thatRecord.properties.keySet()) { 				if (!hasProperty(property)) { 					builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));}} 			return builder.build();} 		com.google.javascript.rhino.jstype.JSType greatestSubtype = registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE); 		com.google.javascript.rhino.jstype.JSType thatRestrictedToObj = registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE).getGreatestSubtype(that); 		if (!thatRestrictedToObj.isEmptyType()) { 			for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.JSType> entry : properties.entrySet()) { 				java.lang.String propName = entry.getKey(); 				com.google.javascript.rhino.jstype.JSType propType = entry.getValue(); 				com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry); 				for (com.google.javascript.rhino.jstype.ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) { 					com.google.javascript.rhino.jstype.JSType altPropType = alt.getPropertyType(propName); 					if ((((altPropType != null) && (!alt.isEquivalentTo(this))) && alt.isSubtype(that)) && ((propType.isUnknownType() || altPropType.isUnknownType()) || altPropType.isEquivalentTo(propType))) { 						builder.addAlternate(alt);}} 				greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());}} 		return greatestSubtype;} 	@java.lang.Override 	com.google.javascript.rhino.jstype.RecordType toMaybeRecordType() { 		return this;} 	@java.lang.Override 	public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) { 		if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) { 			return true;} 		if (registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE).isSubtype(that)) { 			return true;} 		if (!that.isRecordType()) { 			return false;} 		return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());} 	static boolean isSubtype(com.google.javascript.rhino.jstype.ObjectType typeA, com.google.javascript.rhino.jstype.RecordType typeB) { 		for (java.lang.String property : typeB.properties.keySet()) { 			if (!typeA.hasProperty(property)) { 				return false;} 			com.google.javascript.rhino.jstype.JSType propA = typeA.getPropertyType(property); 			com.google.javascript.rhino.jstype.JSType propB = typeB.getPropertyType(property); 			if ((!propA.isUnknownType()) && (!propB.isUnknownType())) { 				if (typeA.isPropertyTypeDeclared(property)) { 					if (!propA.isEquivalentTo(propB)) { 						return false;}} else if (!propA.isSubtype(propB)) { 					return false;}}} 		return true;} 	@java.lang.Override 	com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) { 		for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.JSType> entry : properties.entrySet()) { 			com.google.javascript.rhino.jstype.JSType type = entry.getValue(); 			com.google.javascript.rhino.jstype.JSType resolvedType = type.resolve(t, scope); 			if (type != resolvedType) { 				properties.put(entry.getKey(), resolvedType);}} 		return super.resolveInternal(t, scope);}}
\ No newline at end of file

