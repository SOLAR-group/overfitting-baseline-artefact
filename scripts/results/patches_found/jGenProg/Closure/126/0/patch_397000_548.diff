--- /src/com/google/javascript/jscomp/MinimizeExitPoints.java
+++ /src/com/google/javascript/jscomp/MinimizeExitPoints.java
@@ -143,3 +142,0 @@
-				tryMinimizeExits(finallyBlock, exitType, labelName);
-			}
-		}
@@ -148,4 +144,0 @@
-		if (n.isLabel()) {
-			com.google.javascript.rhino.Node labelBlock = n.getLastChild();
-			tryMinimizeExits(labelBlock, exitType, labelName);
-		}
@@ -156,3 +148,0 @@
-		if ((!n.isBlock()) || (n.getLastChild() == null)) {
-			return;
-		}
@@ -164 +153,0 @@
-		for (com.google.javascript.rhino.Node c : n.children()) {
@@ -167,3 +155,0 @@
-			if (c.isIf()) {
-				com.google.javascript.rhino.Node ifTree = c;
-				com.google.javascript.rhino.Node trueBlock; 				com.google.javascript.rhino.Node falseBlock;
@@ -172,4 +157,0 @@
-				trueBlock = ifTree.getFirstChild().getNext();
-				falseBlock = trueBlock.getNext();
-				tryMinimizeIfBlockExits(trueBlock, falseBlock, 
-				ifTree, exitType, labelName);
@@ -179,7 +160,0 @@
-				trueBlock = ifTree.getFirstChild().getNext();
-				falseBlock = trueBlock.getNext();
-				if (falseBlock != null) {
-					tryMinimizeIfBlockExits(falseBlock, trueBlock, 
-					ifTree, exitType, labelName);
-				}
-			}
@@ -187,4 +161,0 @@
-			if (c == n.getLastChild()) {
-				break;
-			}
-		}
@@ -194,2 +164,0 @@
-		for (com.google.javascript.rhino.Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
-			tryMinimizeExits(c, exitType, labelName);
@@ -197,5 +165,0 @@
-			if (c == n.getLastChild()) {
-				break;
-			}
-		}
-	}
@@ -216,4 +179,0 @@
-	private void tryMinimizeIfBlockExits(com.google.javascript.rhino.Node srcBlock, com.google.javascript.rhino.Node destBlock, 
-	com.google.javascript.rhino.Node ifNode, int exitType, java.lang.String labelName) {
-		com.google.javascript.rhino.Node exitNodeParent = null;
-		com.google.javascript.rhino.Node exitNode = null;
@@ -222,7 +181,0 @@
-		if (srcBlock.isBlock()) {
-			if (!srcBlock.hasChildren()) {
-				return;
-			}
-			exitNodeParent = srcBlock;
-			exitNode = exitNodeParent.getLastChild();
-		} else {
@@ -230,3 +182,0 @@
-			exitNodeParent = ifNode;
-			exitNode = srcBlock;
-		}
@@ -235,3 +184,0 @@
-		if (!com.google.javascript.jscomp.MinimizeExitPoints.matchingExitNode(exitNode, exitType, labelName)) {
-			return;
-		}
@@ -240 +186,0 @@
-		if (ifNode.getNext() != null) {
@@ -243,2 +188,0 @@
-			com.google.javascript.rhino.Node newDestBlock = com.google.javascript.rhino.IR.block().srcref(ifNode);
-			if (destBlock == null) {
@@ -246,2 +189,0 @@
-				ifNode.addChildToBack(newDestBlock);
-			} else if (destBlock.isEmpty()) {
@@ -249,2 +190,0 @@
-				ifNode.replaceChild(destBlock, newDestBlock);
-			} else if (destBlock.isBlock()) {
@@ -252,2 +191,0 @@
-				newDestBlock = destBlock;
-			} else {
@@ -255,3 +192,0 @@
-				ifNode.replaceChild(destBlock, newDestBlock);
-				newDestBlock.addChildToBack(destBlock);
-			}
@@ -260,4 +194,0 @@
-			com.google.javascript.jscomp.MinimizeExitPoints.moveAllFollowing(ifNode, ifNode.getParent(), newDestBlock);
-			compiler.reportCodeChange();
-		}
-	}
@@ -276,3 +206,0 @@
-	private static boolean matchingExitNode(com.google.javascript.rhino.Node n, int type, java.lang.String labelName) {
-		if (n.getType() == type) {
-			if (type == com.google.javascript.rhino.Token.RETURN) {
@@ -280,8 +207,0 @@
-				return !n.hasChildren();
-			} else 
-			if (labelName == null) {
-				return !n.hasChildren();
-			} else {
-				return n.hasChildren() && 
-				labelName.equals(n.getFirstChild().getString());
-			}
@@ -289,3 +208,0 @@
-		}
-		return false;
-	}
@@ -300,12 +217,1813 @@
-	private static void moveAllFollowing(
-	com.google.javascript.rhino.Node start, com.google.javascript.rhino.Node srcParent, com.google.javascript.rhino.Node destParent) {
-		for (com.google.javascript.rhino.Node n = start.getNext(); n != null; n = start.getNext()) {
-			boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
-			srcParent.removeChild(n);
-			if (isFunctionDeclaration) {
-				destParent.addChildToFront(n);
-			} else {
-				destParent.addChildToBack(n);
-			}
-		}
-	}}
\ No newline at end of file
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);}} 		if (n.isLabel()) { 			com.google.javascript.rhino.Node labelBlock = n.getLastChild(); 			tryMinimizeExits(labelBlock, exitType, labelName);} 		if ((!n.isBlock()) || (n.getLastChild() == null)) { 			return;} 		for (com.google.javascript.rhino.Node c : n.children()) { 			if (c.isIf()) { 				com.google.javascript.rhino.Node ifTree = c; 				com.google.javascript.rhino.Node trueBlock; 				com.google.javascript.rhino.Node falseBlock; 				trueBlock = ifTree.getFirstChild().getNext(); 				falseBlock = trueBlock.getNext(); 				tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName); 				trueBlock = ifTree.getFirstChild().getNext(); 				falseBlock = trueBlock.getNext(); 				if (falseBlock != null) { 					tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);}} 			if (c == n.getLastChild()) { 				break;}} 		for (com.google.javascript.rhino.Node c = n.getLastChild(); c != null; c = n.getLastChild()) { 			tryMinimizeExits(c, exitType, labelName); 			if (c == n.getLastChild()) { 				break;}}} 	private void tryMinimizeIfBlockExits(com.google.javascript.rhino.Node srcBlock, com.google.javascript.rhino.Node destBlock, com.google.javascript.rhino.Node ifNode, int exitType, java.lang.String labelName) { 		com.google.javascript.rhino.Node exitNodeParent = null; 		com.google.javascript.rhino.Node exitNode = null; 		if (srcBlock.isBlock()) { 			if (!srcBlock.hasChildren()) { 				return;} 			exitNodeParent = srcBlock; 			exitNode = exitNodeParent.getLastChild();} else { 			exitNodeParent = ifNode; 			exitNode = srcBlock;} 		if (!com.google.javascript.jscomp.MinimizeExitPoints.matchingExitNode(exitNode, exitType, labelName)) { 			return;} 		if (ifNode.getNext() != null) { 			com.google.javascript.rhino.Node newDestBlock = com.google.javascript.rhino.IR.block().srcref(ifNode); 			if (destBlock == null) { 				ifNode.addChildToBack(newDestBlock);} else if (destBlock.isEmpty()) { 				ifNode.replaceChild(destBlock, newDestBlock);} else if (destBlock.isBlock()) { 				newDestBlock = destBlock;} else { 				ifNode.replaceChild(destBlock, newDestBlock); 				newDestBlock.addChildToBack(destBlock);} 			com.google.javascript.jscomp.MinimizeExitPoints.moveAllFollowing(ifNode, ifNode.getParent(), newDestBlock); 			compiler.reportCodeChange();}} 	private static boolean matchingExitNode(com.google.javascript.rhino.Node n, int type, java.lang.String labelName) { 		if (n.getType() == type) { 			if (type == com.google.javascript.rhino.Token.RETURN) { 				return !n.hasChildren();} else if (labelName == null) { 				return !n.hasChildren();} else { 				return n.hasChildren() && labelName.equals(n.getFirstChild().getString());}} 		return false;} 	private static void moveAllFollowing(com.google.javascript.rhino.Node start, com.google.javascript.rhino.Node srcParent, com.google.javascript.rhino.Node destParent) { 		for (com.google.javascript.rhino.Node n = start.getNext(); n != null; n = start.getNext()) { 			boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n); 			srcParent.removeChild(n); 			if (isFunctionDeclaration) { 				destParent.addChildToFront(n);} else { 				destParent.addChildToBack(n);}}}}
\ No newline at end of file

