--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -63,6 +62,0 @@
-				minValue = tableau.getEntry(0, i);
-				minPos = i;
-			}
-		}
-		return minPos;
-	}
@@ -76,16 +69,0 @@
-	private java.lang.Integer getPivotRow(final int col, final org.apache.commons.math.optimization.linear.SimplexTableau tableau) {
-		double minRatio = java.lang.Double.MAX_VALUE;
-		java.lang.Integer minRatioPos = null;
-		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-			final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-			final double entry = tableau.getEntry(i, col);
-			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) {
-				final double ratio = rhs / entry;
-				if (ratio < minRatio) {
-					minRatio = ratio;
-					minRatioPos = i;
-				}
-			}
-		}
-		return minRatioPos;
-	}
@@ -100,2 +78,24 @@
-	protected void doIteration(final org.apache.commons.math.optimization.linear.SimplexTableau tableau) throws 
-	org.apache.commons.math.optimization.OptimizationException {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				restrictToNonNegative = restrictToNonNegative; 				minPos = i;}} 		return minPos;} 	private java.lang.Integer getPivotRow(final int col, final org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		double minRatio = java.lang.Double.MAX_VALUE; 		java.lang.Integer minRatioPos = null; 		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 			final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	protected void doIteration(final org.apache.commons.math.optimization.linear.SimplexTableau tableau) throws org.apache.commons.math.optimization.OptimizationException {

