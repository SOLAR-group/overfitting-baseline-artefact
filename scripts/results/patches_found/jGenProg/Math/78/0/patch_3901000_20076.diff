--- /src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ /src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -183,3 +182,0 @@
-				tb += h;
-				interpolator.setInterpolatedTime(tb);
-				final double gb = handler.g(tb, interpolator.getInterpolatedState());
@@ -188 +184,0 @@
-				if (g0Positive ^ (gb >= 0)) {
@@ -201 +196,0 @@
-					increasing = gb >= ga;
@@ -203,18 +197,0 @@
-					final org.apache.commons.math.analysis.UnivariateRealFunction f = new org.apache.commons.math.analysis.UnivariateRealFunction() {
-						public double value(final double t) throws org.apache.commons.math.FunctionEvaluationException {
-							try {
-								interpolator.setInterpolatedTime(t);
-								return handler.g(t, interpolator.getInterpolatedState());
-							} catch (org.apache.commons.math.ode.DerivativeException e) {
-								throw new org.apache.commons.math.FunctionEvaluationException(e, t);
-							} catch (org.apache.commons.math.ode.events.EventException e) {
-								throw new org.apache.commons.math.FunctionEvaluationException(e, t);
-							}
-						}
-					};
-					final org.apache.commons.math.analysis.solvers.BrentSolver solver = new org.apache.commons.math.analysis.solvers.BrentSolver();
-					solver.setAbsoluteAccuracy(convergence);
-					solver.setMaximalIterationCount(maxIterationCount);
-					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-					if ((java.lang.Math.abs(root - ta) <= convergence) && 
-					(java.lang.Math.abs(root - previousEventTime) <= convergence)) {
@@ -222 +199,24 @@
-						ta = tb;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				ta = tb; 				tb += h; 				interpolator.setInterpolatedTime(tb); 				final double gb = handler.g(tb, interpolator.getInterpolatedState()); 				if (g0Positive ^ (gb >= 0)) { 					increasing = gb >= ga; 					final org.apache.commons.math.analysis.UnivariateRealFunction f = new org.apache.commons.math.analysis.UnivariateRealFunction() { 						public double value(final double t) throws org.apache.commons.math.FunctionEvaluationException { 							try { 								interpolator.setInterpolatedTime(t); 								return handler.g(t, interpolator.getInterpolatedState());} catch (org.apache.commons.math.ode.DerivativeException e) { 								throw new org.apache.commons.math.FunctionEvaluationException(e, t);} catch (org.apache.commons.math.ode.events.EventException e) { 								throw new org.apache.commons.math.FunctionEvaluationException(e, t);}}}; 					final org.apache.commons.math.analysis.solvers.BrentSolver solver = new org.apache.commons.math.analysis.solvers.BrentSolver(); 					solver.setAbsoluteAccuracy(convergence); 					solver.setMaximalIterationCount(maxIterationCount); 					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta); 					if ((java.lang.Math.abs(root - ta) <= convergence) && (java.lang.Math.abs(root - previousEventTime) <= convergence)) { 						ta = tb;

