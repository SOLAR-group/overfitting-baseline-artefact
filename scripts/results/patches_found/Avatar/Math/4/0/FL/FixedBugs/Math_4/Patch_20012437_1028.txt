--- /src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ /src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1751,7 +1751,10 @@ public class DSCompiler {
             for (int k = 0; k < orders.length; ++k) {
                 if (orders[k] > 0) {
                     try {
-                        term *= FastMath.pow(delta[k], orders[k]) /
+                        if (orders == null) {
+    return 0.0;
+}
+term *= FastMath.pow(delta[k], orders[k]) /
                                 ArithmeticUtils.factorial(orders[k]);
                     } catch (NotPositiveException e) {
                         // this cannot happen
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
index 674fb0ab2..df3b536f8 100644
--- /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
+++ /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
@@ -106,13 +106,7 @@ public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {
         }
         final SubHyperplane<Euclidean1D> lowerCut =
             new OrientedPoint(new Vector1D(lower), false).wholeHyperplane();
-        if (Double.isInfinite(upper) && (upper > 0)) {
-            // the tree must be open on the positive infinity side
-            return new BSPTree<Euclidean1D>(lowerCut,
-                                            new BSPTree<Euclidean1D>(Boolean.FALSE),
-                                            new BSPTree<Euclidean1D>(Boolean.TRUE),
-                                            null);
-        }
+        
 
         // the tree must be bounded on the two sides
         final SubHyperplane<Euclidean1D> upperCut =
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java
index 7c9a28f14..aa855c64c 100644
--- /src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java
+++ /src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java
@@ -76,7 +76,7 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {
         if (norm2 == 0.0) {
             throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);
         }
-        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
+        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), this.direction);
         zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
     }
 
diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java
index c5a198a61..2591281d3 100644
--- /src/main/java/org/apache/commons/math3/util/FastMath.java
+++ /src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -2661,7 +2661,7 @@ public class FastMath {
                 return Math.PI * F_1_2;
             }
 
-            if (y < 0 || 1 / y < 0) {
+            if ((y < 0 || 1 / y < 0) || (y > 0)) {
                 return -Math.PI * F_1_2;
             }
         }
