--- /src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java
+++ /src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java
@@ -867,7 +867,7 @@ public class DerivativeStructure implements RealFieldElement<DerivativeStructure
      * @throws MathArithmeticException if factorials becomes too large
      */
     public double taylor(final double ... delta) throws MathArithmeticException {
-        return compiler.taylor(data, 0, delta);
+        return compiler.taylor(data, 1, delta);
     }
 
     /** {@inheritDoc}
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
index 674fb0ab2..df3b536f8 100644
--- /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
+++ /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
@@ -106,13 +106,7 @@ public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {
         }
         final SubHyperplane<Euclidean1D> lowerCut =
             new OrientedPoint(new Vector1D(lower), false).wholeHyperplane();
-        if (Double.isInfinite(upper) && (upper > 0)) {
-            // the tree must be open on the positive infinity side
-            return new BSPTree<Euclidean1D>(lowerCut,
-                                            new BSPTree<Euclidean1D>(Boolean.FALSE),
-                                            new BSPTree<Euclidean1D>(Boolean.TRUE),
-                                            null);
-        }
+        
 
         // the tree must be bounded on the two sides
         final SubHyperplane<Euclidean1D> upperCut =
diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java
index c5a198a61..b98870f36 100644
--- /src/main/java/org/apache/commons/math3/util/FastMath.java
+++ /src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -2572,128 +2572,7 @@ public class FastMath {
         return result;
     }
 
-    /**
-     * Two arguments arctangent function
-     * @param y ordinate
-     * @param x abscissa
-     * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
-     */
-    public static double atan2(double y, double x) {
-        if (x != x || y != y) {
-            return Double.NaN;
-        }
-
-        if (y == 0) {
-            final double result = x * y;
-            final double invx = 1d / x;
-            final double invy = 1d / y;
-
-            if (invx == 0) { // X is infinite
-                if (x > 0) {
-                    return y; // return +/- 0.0
-                } else {
-                    return copySign(Math.PI, y);
-                }
-            }
-
-            if (x < 0 || invx < 0) {
-                if (y < 0 || invy < 0) {
-                    return -Math.PI;
-                } else {
-                    return Math.PI;
-                }
-            } else {
-                return result;
-            }
-        }
-
-        // y cannot now be zero
-
-        if (y == Double.POSITIVE_INFINITY) {
-            if (x == Double.POSITIVE_INFINITY) {
-                return Math.PI * F_1_4;
-            }
-
-            if (x == Double.NEGATIVE_INFINITY) {
-                return Math.PI * F_3_4;
-            }
-
-            return Math.PI * F_1_2;
-        }
-
-        if (y == Double.NEGATIVE_INFINITY) {
-            if (x == Double.POSITIVE_INFINITY) {
-                return -Math.PI * F_1_4;
-            }
-
-            if (x == Double.NEGATIVE_INFINITY) {
-                return -Math.PI * F_3_4;
-            }
-
-            return -Math.PI * F_1_2;
-        }
-
-        if (x == Double.POSITIVE_INFINITY) {
-            if (y > 0 || 1 / y > 0) {
-                return 0d;
-            }
-
-            if (y < 0 || 1 / y < 0) {
-                return -0d;
-            }
-        }
-
-        if (x == Double.NEGATIVE_INFINITY)
-        {
-            if (y > 0.0 || 1 / y > 0.0) {
-                return Math.PI;
-            }
-
-            if (y < 0 || 1 / y < 0) {
-                return -Math.PI;
-            }
-        }
-
-        // Neither y nor x can be infinite or NAN here
-
-        if (x == 0) {
-            if (y > 0 || 1 / y > 0) {
-                return Math.PI * F_1_2;
-            }
-
-            if (y < 0 || 1 / y < 0) {
-                return -Math.PI * F_1_2;
-            }
-        }
-
-        // Compute ratio r = y/x
-        final double r = y / x;
-        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
-            return atan(r, 0, x < 0);
-        }
-
-        double ra = doubleHighPart(r);
-        double rb = r - ra;
-
-        // Split x
-        final double xa = doubleHighPart(x);
-        final double xb = x - xa;
-
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
-
-        final double temp = ra + rb;
-        rb = -(temp - ra - rb);
-        ra = temp;
-
-        if (ra == 0) { // Fix up the sign so atan works correctly
-            ra = copySign(0d, y);
-        }
-
-        // Call atan
-        final double result = atan(ra, rb, x < 0);
-
-        return result;
-    }
+    
 
     /** Compute the arc sine of a number.
      * @param x number on which evaluation is done