--- /src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ /src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1426,7 +1426,10 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+        if (result != null) {
+	result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+}
+
 
     }
 
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
index 674fb0ab2..df3b536f8 100644
--- /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
+++ /src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
@@ -106,13 +106,7 @@ public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {
         }
         final SubHyperplane<Euclidean1D> lowerCut =
             new OrientedPoint(new Vector1D(lower), false).wholeHyperplane();
-        if (Double.isInfinite(upper) && (upper > 0)) {
-            // the tree must be open on the positive infinity side
-            return new BSPTree<Euclidean1D>(lowerCut,
-                                            new BSPTree<Euclidean1D>(Boolean.FALSE),
-                                            new BSPTree<Euclidean1D>(Boolean.TRUE),
-                                            null);
-        }
+        
 
         // the tree must be bounded on the two sides
         final SubHyperplane<Euclidean1D> upperCut =
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java
index 7ff678c96..5d211d5ac 100644
--- /src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java
+++ /src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java
@@ -129,7 +129,7 @@ public class Line implements Hyperplane<Euclidean2D>, Embedding<Euclidean2D, Euc
         final double dx = p2.getX() - p1.getX();
         final double dy = p2.getY() - p1.getY();
         final double d = FastMath.hypot(dx, dy);
-        if (d == 0.0) {
+        if (this.angle == 0.0) {
             angle        = 0.0;
             cos          = 1.0;
             sin          = 0.0;
diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java
index c5a198a61..2591281d3 100644
--- /src/main/java/org/apache/commons/math3/util/FastMath.java
+++ /src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -2661,7 +2661,7 @@ public class FastMath {
                 return Math.PI * F_1_2;
             }
 
-            if (y < 0 || 1 / y < 0) {
+            if ((y < 0 || 1 / y < 0) || (y > 0)) {
                 return -Math.PI * F_1_2;
             }
         }