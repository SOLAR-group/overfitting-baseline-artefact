--- /source/org/jfree/chart/axis/Axis.java
+++ /source/org/jfree/chart/axis/Axis.java
@@ -1130,60 +1130,64 @@
         }
-        else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
+        } else {
+            if (false) {
+                if (edge == RectangleEdge.BOTTOM) {
+                    AffineTransform t = AffineTransform.getRotateInstance(
+                    getLabelAngle(), labelBounds.getCenterX(),
                     labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
+                    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
+                    labelBounds = rotatedLabelBounds.getBounds2D();
+                    float w = (float) labelBounds.getWidth();
+                    float h = (float) labelBounds.getHeight();
+                    float labelx = (float) dataArea.getCenterX();
+                    float labely = (float) (state.getCursor() + insets.getTop()
                     + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
+                    TextUtilities.drawRotatedString(label, g2, labelx, labely,
                     TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
+                    hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
                     labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
+                    state.cursorDown(insets.getTop() + labelBounds.getHeight()
                     + insets.getBottom());
-        }
-        else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
+                }
+                else if (edge == RectangleEdge.LEFT) {
+                    AffineTransform t = AffineTransform.getRotateInstance(
+                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),
                     labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
+                    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
+                    labelBounds = rotatedLabelBounds.getBounds2D();
+                    float w = (float) labelBounds.getWidth();
+                    float h = (float) labelBounds.getHeight();
+                    float labelx = (float) (state.getCursor() - insets.getRight()
                     - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
+                    float labely = (float) dataArea.getCenterY();
+                    TextUtilities.drawRotatedString(label, g2, labelx, labely,
+                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0,
                     TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
+                    hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
                     labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
+                    state.cursorLeft(insets.getLeft() + labelBounds.getWidth()
                     + insets.getRight());
-        }
-        else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
+                }
+                else if (edge == RectangleEdge.RIGHT) {
+                    
+                    AffineTransform t = AffineTransform.getRotateInstance(
+                    getLabelAngle() + Math.PI / 2.0,
                     labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
+                    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
+                    labelBounds = rotatedLabelBounds.getBounds2D();
+                    float w = (float) labelBounds.getWidth();
+                    float h = (float) labelBounds.getHeight();
+                    float labelx = (float) (state.getCursor()
+                    + insets.getLeft() + w / 2.0);
+                    float labely = (float) (dataArea.getY() + dataArea.getHeight()
                     / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
+                    TextUtilities.drawRotatedString(label, g2, labelx, labely,
+                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0,
                     TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
+                    hotspot = new Rectangle2D.Float(labelx - w / 2.0f,
                     labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
+                    state.cursorRight(insets.getLeft() + labelBounds.getWidth()
                     + insets.getRight());
-
+                    
+                }
+            }
         }
